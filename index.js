const Discord = require("discord.js");
const ytdl = require("ytdl-core");
const client = new Discord.Client();
const configs = require("./config.json");
const google = require("googleapis");
const fs = require('fs');

const youtube = new google.youtube_v3.Youtube({
  version: "v3",
  auth: configs.GOOGLE_API_KEY,
});

const prefix = configs.PREFIX;

const servidores = [];

client.on("guildCreate", (guild) => {
    // quando entrar no servidor
    console.log('Id da Guild onde eu entrei: ' + guild.id);
    console.log('Nome da Guild onde eu entrei: ' + guild.name);

    servidores[guild.id] = { // cria um servidor se n√£o existir
        connection: null, // conex√£o
        dispatcher: null, // isso √© o que vai tocar
        queue: [], // isso √© a fila de m√∫sicas
        playingNow: false, // isso √© se est√° tocando alguma m√∫sica
    }

    saveServer(guild.id); // salva o servidor
});

client.on("ready", () => {
    // quando o bot estiver pronto
    loadServers(); // carrega os servidores
    console.log("Estou pronto!");
});

client.on("message", async (msg) => {
  //filtro de mensagens

  if (!msg.guild) return; // se n√£o for uma mensagem de servidor, retorna

  if (!msg.content.startsWith(prefix)) return; //se n√£o for uma mensagem com o prefixo, retorna

  if (!msg.member.voice.channel) {
    msg.channel.send("Se n√£o ta em um canal ü¶ß");
    return; // se n√£o estiver em um canal de voz, retorna
  }
  //comandos
  if (msg.content === prefix + "j") {
    // .j
    try {
      // tenta
      servidores[msg.guild.id].connection = await msg.member.voice.channel.join(); // espera o comando ser executado e ent√£o conecta
    } catch (err) {
      // se der erro
      console.log("'Erro ao entra no canal de voz!");
      console.log(err);
    }
  }

  if (msg.content === prefix + "dc") {
    // .dc
    msg.member.voice.channel.leave();
    servidores[msg.guild.id].connection = null;
    servidores[msg.guild.id].dispatcher = null;
    servidores[msg.guild.id].queue = [];
    servidores[msg.guild.id].playingNow = false;
  }

  if (msg.content.startsWith(prefix + "p")) {
    // .p <link>
    let oQueTocar = msg.content.slice(3); // pega o que est√° depois do comando

    if (oQueTocar.length === 0) {
      // se n√£o tiver nada depois do comando
      msg.channel.send("Voc√™ tem que digitar algo corno üêÇ"); // manda uma mensagem
      return;
    }

    if (servidores[msg.guild.id].connection === null) {
      // se n√£o estiver conectado ao canal de voz, ele entra
      try {
        servidores[msg.guild.id].connection = await msg.member.voice.channel.join();
      } catch (err) {
        console.log("'Erro ao entra no canal de voz!");
        console.log(err);
      }
    }

    if (ytdl.validateURL(oQueTocar)) {
      // se o que est√° depois do comando for uma url v√°lida
      servidores[msg.guild.id].queue.push(oQueTocar); // adiciona a fila
      console.log("Adicionado: " + oQueTocar);
      playMusics(msg);
    } else {
      youtube.search.list(
        {
          // se n√£o for uma url v√°lida, procura na api do youtube
          q: oQueTocar, // Search query
          part: "snippet", //peda√ßo de informa√ß√£o de cada v√≠deo
          fields: "items(id(videoId), snippet(title, channelTitle))", //campos que quero que retorne
          type: "video", //tipo de pesquisa
        },
        function (err, result) {
          if (err) {
            console.log(err);
          }

          if (result) {
            // se tiver resultado
            const listResult = [];

            //organiza nossos resultados da pesquisa
            for (let i in result.data.items) {
              // para cada item
              const createItem = {
                // cria um objeto
                titleVideo: result.data.items[i].snippet.title, // titulo do v√≠deo
                channelTitle: result.data.items[i].snippet.channelTitle, // canal do v√≠deo
                videoId:
                  "https://www.youtube.com/watch?v=" +
                  result.data.items[i].id.videoId, // id do v√≠deo
                urlVideo: "https://www.youtube.com/watch?v=" + result.data.items[i].id.videoId, // url do v√≠deo
              };

              listResult.push(createItem); // adiciona o objeto a lista
            }

            // construindo a mensagem de Embed
            const embed = new Discord.MessageEmbed() // cria um embed
              .setColor([194, 90, 1]) // cor do embed
              .setAuthor("üé∂ R3…≥3…† Sounds üé∂") // titulo do embed
              .setDescription("üéµ Escolha uma m√∫sica de 1-5 üéµ"); // descri√ß√£o do embed

            // adiciona campos para cada resultado da lista
            for (let i in listResult) {
              // para cada resultado
              embed.addField(
                // adiciona um campo
                `${parseInt(i) + 1}: ${listResult[i].titleVideo}`, // titulo do campo
                `${listResult[i].channelTitle}` // canal do campo
              );
            }

            msg.channel
              .send(embed) // envia o embed
              .then((embedMessage) => {
                // quando envia o embed
                const reactions = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£"]; // lista de rea√ß√µes

                //reage na mensagem para cada emoji que escolhemos
                for (let i = 0; i < reactions.length; i++) {
                  // for(let i in reactions) s√£o a mesma coisa
                  embedMessage.react(reactions[i]); // reage na mensagem
                }

                const filter = (reaction, user) => {
                  // filtro de rea√ß√µes
                  return (
                    reactions.includes(reaction.emoji.name) && // se a rea√ß√£o for uma das escolhidas
                    user.id === msg.author.id
                  ); // e o usu√°rio for o mesmo que enviou a mensagem que enviou a rea√ß√£o retorna true, sen√£o false
                };

                embedMessage
                  .awaitReactions(filter, {
                    max: 1,
                    time: 30000,
                    errors: ["time"],
                  }) // espera por uma rea√ß√£o e filtra as rea√ß√µes que foram escolhidas
                  .then((collected) => {
                    // quando tiver uma rea√ß√£o
                    const reaction = collected.first(); // pega a primeira rea√ß√£o
                    const idOption = reactions.indexOf(reaction.emoji.name); // pega o index da rea√ß√£o escolhida e armazena na vari√°vel idOption

                    msg.channel
                      .send(`üéµ Voc√™ escolheu: ${listResult[idOption].titleVideo} 
                                                              de ${listResult[idOption].channelTitle} üéµ`); // manda a mensagem com o que o usu√°rio escolheu

                    servidores[msg.guild.id].queue.push(listResult[idOption].videoId); // adiciona a fila
                    for (let i in servidores[msg.guild.id].queue) {
                      msg.channel.send(
                        `üéµ ${parseInt(i) + 1} - ${listResult[i].titleVideo } - ${listResult[i].urlVideo}`
                        
                      );
                      return;
                    }

                    playMusics(msg); // toca a m√∫sica
                  })
                  .catch((err) => {
                    msg.reply("Voc√™ n√£o escolheu nenhuma m√∫sica macaco ü¶ß"); // manda uma mensagem de erro
                    console.log(err);
                  });
              });
          }
        }
      );
    }
  }

  if (msg.content === prefix + "s") {
    // .s
    servidores[msg.guild.id].dispatcher.end(); // para a m√∫sica atual e vai para a proxima
    // mostra a nova m√∫sica
    for (let i in servidores[msg.guild.id].queue) {
      msg.channel.send(
        `A musica que est√° tocando √©: ${
          servidores[msg.guild.id].queue[parseInt(i) + 1]
        }`
      );
      break;
    }
  }
});

const playMusics = (msg) => {
  if (servidores[msg.guild.id].playingNow === false) {
    // se n√£o estiver tocando nada

    const playNow = servidores[msg.guild.id].queue[0]; // pega a primeira m√∫sica da fila
    servidores[msg.guild.id].playingNow = true; // est√° tocando
    servidores[msg.guild.id].dispatcher = servidores[msg.guild.id].connection.play(
      ytdl(playNow)
    ); // toca a m√∫sica

    servidores[msg.guild.id].dispatcher.on("finish", () => {
      // quando terminar
      servidores[msg.guild.id].queue.shift(); // remove a primeira m√∫sica da fila
      servidores[msg.guild.id].playingNow = false; // n√£o est√° tocando
      if (servidores[msg.guild.id].queue.length > 0) {
        // se a fila tiver mais de uma m√∫sica
        playMusics(msg); // roda a fun√ß√£o novamente
      } else {
        servidores[msg.guild.id].dispatcher = null; // se n√£o tiver mais nada, ele n√£o est√° tocando nada
      }
    });
  }
};

const loadServers = () =>{
    fs.readFile("serverList.json", "utf8", (err, data) => {
        if(err){
            console.log('ERRO: 312 Ocorreu um erro ao ler registro de servidores.');
            console.log(err);
        } else{
            const readObj = JSON.parse(data);
            for(let i in readObj.servers){
                servidores[readObj.servers[i]] = {
                    connection: null,
                    dispatcher: null,
                    queue: [],
                    playingNow: false
                }
            }
        }
    });
}

const saveServer = (idNewServer) => {
    fs.readFile("serverList.json", "utf8", (err, data) => {
        if(err){
            console.log('ERRO: 666 Ocorreu um erro ao tentar ler o arquivo e salvar o servidor novo.');
            console.log(err);
        } else{
            const readObj = JSON.parse(data);
            readObj.servers.push(idNewServer);
            const writeObj = JSON.stringify(readObj);

            fs.writeFile("serverList.json", writeObj, 'utf8', () => {})
        }
    });
}

client.login(configs.TOKEN_DISCORD); // login do bot
